diff --git a/opnsense/php-pfSense/files/pfSense.c b/opnsense/php-pfSense/files/pfSense.c
index 8c0a5e8..e660423 100644
--- pfSense.c
+++ pfSense.c
@@ -1,4 +1,5 @@
 /*
+	Copyright (C) 2014-2016 Franco Fichtner <franco@opnsense.org>
         Copyright (C) 2010 Ermal Luçi
         All rights reserved.
 
@@ -259,7 +260,7 @@ PHP_FUNCTION(pfSense_getall_interface_addresses)
 					} while (mask);
 			}
 			snprintf(outputbuf + strlen(outputbuf), sizeof(outputbuf) - strlen(outputbuf), "/%d", i);
-			add_next_index_string(return_value, outputbuf, 1);
+			add_next_index_string(return_value, outputbuf);
 			break;
 		case AF_INET6:
 			bzero(outputbuf, sizeof outputbuf);
@@ -274,7 +275,7 @@ PHP_FUNCTION(pfSense_getall_interface_addresses)
 			tmp6 = (struct sockaddr_in6 *)mb->ifa_netmask;
 			snprintf(outputbuf + strlen(outputbuf), sizeof(outputbuf) - strlen(outputbuf),
 				"/%d", prefix(&tmp6->sin6_addr, sizeof(struct in6_addr)));
-			add_next_index_string(return_value, outputbuf, 1);
+			add_next_index_string(return_value, outputbuf);
 			break;
 		}
 	}
@@ -291,8 +292,7 @@ PHP_FUNCTION(pfSense_get_interface_addresses)
 	char outputbuf[128];
 	char *ifname;
 	int ifname_len, s, addresscnt = 0, addresscnt6 = 0;
-	zval *caps;
-	zval *encaps;
+	zval caps[1], encaps[1];
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &ifname, &ifname_len) == FAILURE)
 		RETURN_NULL();
@@ -312,9 +312,9 @@ PHP_FUNCTION(pfSense_get_interface_addresses)
 			continue;
 
 		if (mb->ifa_flags & IFF_UP)
-			add_assoc_string(return_value, "status", "up", 1);
+			add_assoc_string(return_value, "status", "up");
 		else
-			add_assoc_string(return_value, "status", "down", 1);
+			add_assoc_string(return_value, "status", "down");
 		if (mb->ifa_flags & IFF_LINK0)
 			add_assoc_long(return_value, "link0", 1);
 		if (mb->ifa_flags & IFF_LINK1)
@@ -344,33 +344,31 @@ PHP_FUNCTION(pfSense_get_interface_addresses)
 			add_assoc_long(return_value, "mtu", md->ifi_mtu);
 			switch (md->ifi_type) {
 			case IFT_IEEE80211:
-				add_assoc_string(return_value, "iftype", "wireless", 1);
+				add_assoc_string(return_value, "iftype", "wireless");
 				break;
 			case IFT_ETHER:
 			case IFT_FASTETHER:
 			case IFT_FASTETHERFX:
 			case IFT_GIGABITETHERNET:
-				add_assoc_string(return_value, "iftype", "ether", 1);
+				add_assoc_string(return_value, "iftype", "ether");
 				break;
 			case IFT_L2VLAN:
-				add_assoc_string(return_value, "iftype", "vlan", 1);
+				add_assoc_string(return_value, "iftype", "vlan");
 				break;
 			case IFT_BRIDGE:
-				add_assoc_string(return_value, "iftype", "bridge", 1);
+				add_assoc_string(return_value, "iftype", "bridge");
 				break;
 			case IFT_TUNNEL:
 			case IFT_GIF:
 			case IFT_ENC:
 			case IFT_PFLOG: 
 			case IFT_PFSYNC:
-				add_assoc_string(return_value, "iftype", "virtual", 1);
+				add_assoc_string(return_value, "iftype", "virtual");
 				break;
 			default:
-				add_assoc_string(return_value, "iftype", "other", 1);
+				add_assoc_string(return_value, "iftype", "other");
 			}
 		}
-		ALLOC_INIT_ZVAL(caps);
-		ALLOC_INIT_ZVAL(encaps);
 		array_init(caps);
 		array_init(encaps);
 		strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
@@ -453,7 +451,7 @@ PHP_FUNCTION(pfSense_get_interface_addresses)
 			bzero(outputbuf, sizeof outputbuf);
 			tmp = (struct sockaddr_in *)mb->ifa_addr;
 			inet_ntop(AF_INET, (void *)&tmp->sin_addr, outputbuf, 128);
-			add_assoc_string(return_value, "ipaddr", outputbuf, 1);
+			add_assoc_string(return_value, "ipaddr", outputbuf);
 			addresscnt++;
 			tmp = (struct sockaddr_in *)mb->ifa_netmask;
 			unsigned char mask;
@@ -471,20 +469,20 @@ PHP_FUNCTION(pfSense_get_interface_addresses)
 
 			bzero(outputbuf, sizeof outputbuf);
 			inet_ntop(AF_INET, (void *)&tmp->sin_addr, outputbuf, 128);
-			add_assoc_string(return_value, "subnet", outputbuf, 1);
+			add_assoc_string(return_value, "subnet", outputbuf);
 
 			if (mb->ifa_flags & IFF_BROADCAST) {
 				bzero(outputbuf, sizeof outputbuf);
 				tmp = (struct sockaddr_in *)mb->ifa_broadaddr;
 				inet_ntop(AF_INET, (void *)&tmp->sin_addr, outputbuf, 128);
-				add_assoc_string(return_value, "broadcast", outputbuf, 1);
+				add_assoc_string(return_value, "broadcast", outputbuf);
 			}
 
 			if (mb->ifa_flags & IFF_POINTOPOINT) {
 				bzero(outputbuf, sizeof outputbuf);
 				tmp6 = (struct sockaddr_in6 *)mb->ifa_dstaddr;
 				inet_ntop(AF_INET, (void *)&tmp6->sin6_addr, outputbuf, 128);
-				add_assoc_string(return_value, "tunnel", outputbuf, 1);
+				add_assoc_string(return_value, "tunnel", outputbuf);
 			}
 
 		break;
@@ -496,7 +494,7 @@ PHP_FUNCTION(pfSense_get_interface_addresses)
 			if (IN6_IS_ADDR_LINKLOCAL(&tmp6->sin6_addr))
 				break;
                         inet_ntop(AF_INET6, (void *)&tmp6->sin6_addr, outputbuf, 128);
-                        add_assoc_string(return_value, "ipaddr6", outputbuf, 1);
+                        add_assoc_string(return_value, "ipaddr6", outputbuf);
                         addresscnt6++;
                         tmp6 = (struct sockaddr_in6 *)mb->ifa_netmask;
                         add_assoc_long(return_value, "subnetbits6", prefix(&tmp6->sin6_addr, sizeof(struct in6_addr)));
@@ -505,14 +503,14 @@ PHP_FUNCTION(pfSense_get_interface_addresses)
                                 bzero(outputbuf, sizeof outputbuf);
                                 tmp = (struct sockaddr_in *)mb->ifa_dstaddr;
                                 inet_ntop(AF_INET, (void *)&tmp->sin_addr, outputbuf, 128);
-                                add_assoc_string(return_value, "tunnel6", outputbuf, 1);
+                                add_assoc_string(return_value, "tunnel6", outputbuf);
                         }
 		break;
 		case AF_LINK:
 			tmpdl = (struct sockaddr_dl *)mb->ifa_addr;
 			bzero(outputbuf, sizeof outputbuf);
 			ether_ntoa_r((struct ether_addr *)LLADDR(tmpdl), outputbuf);
-			add_assoc_string(return_value, "macaddr", outputbuf, 1);
+			add_assoc_string(return_value, "macaddr", outputbuf);
 			md = (struct if_data *)mb->ifa_data;
 
 		break;
